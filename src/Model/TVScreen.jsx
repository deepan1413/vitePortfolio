/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 TV3.glb 
*/

import React from "react";
import * as THREE from "three";
import { useLoader } from "@react-three/fiber";
import { useGLTF, useTexture, Html, Grid } from "@react-three/drei";
import { TextureLoader, RepeatWrapping } from "three";

export default function TVScreen(props) {
  // https://img.icons8.com/fluency/48/instagram-new.png
  const githubTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/glyph-neue/240/github.png"
  );
  const linkedinTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/color/240/linkedin.png"
  );
  const instagramTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/fluency/240/instagram-new.png"
  );
  const resumeTexture = useLoader(
    TextureLoader,
    "https://img.icons8.com/bubbles/200/resume.png"
  );
  const { nodes, materials } = useGLTF("./Model/TV3.glb");

  const tvBackPanel = useLoader(TextureLoader,"./Textures/gpt1.jpg");
  const tvScreen = useLoader(TextureLoader, "./Textures/10.jpg");
  tvScreen.center.set(0.5, 0.5); // Center the pivot
  tvScreen.repeat.set(1, 1); // Ensure full coverage
  tvScreen.wrapS = THREE.ClampToEdgeWrapping;
  tvScreen.wrapT = THREE.ClampToEdgeWrapping; // Set pivot to center
  tvScreen.rotation = Math.PI;
  const instagramLink = "https://www.instagram.com/deepan_wolfie/";
  const githubLink = "https://www.github.com/deepan1413";
  const resumeLink = "/Resume/Deepan_Resume.pdf";
  const linkedinLink = "https://www.linkedin.com/in/deepan-l-3aabb425b";
  const cubeSize = [7, 1, 4];


  resumeTexture.center.set(0.5, 0.5); // Set pivot to center
  resumeTexture.rotation = Math.PI; // Rotate 45 degrees

  instagramTexture.center.set(0.5, 0.5); // Set pivot to center
  instagramTexture.rotation = Math.PI; // Rotate 45 degrees

  githubTexture.center.set(0.5, 0.5); // Set pivot to center
  githubTexture.rotation = Math.PI; // Rotate 45 degrees

  linkedinTexture.center.set(0.5, 0.5); // Set pivot to center
  linkedinTexture.repeat.y = -1; // Rotate 45 degrees

  const handleClick = (url) => {
    if (props.opacity > 0.9) {
      window.open(url, "_blank");
    }
  };
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.Plane.geometry}
        material={nodes.Plane.material}
        position={[35, 30.69, 10]}
        rotation={[Math.PI / 2, 0, 1.5]}
        scale={[10, 1, 10]}
        onClick={(event) => {
          event.stopPropagation();
          console.log("BackPanel");
        }}
      >
        <meshBasicMaterial map={tvBackPanel} />
      </mesh>
      /* * * * * * */
      {/* <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.9, 30.69, 10]}
        scale={[19, 1, 10]}
        onClick={(event) => {
          event.stopPropagation();
          console.log("TvScreen");
        }}
        rotation={[Math.PI / 2, 0, 1.5]}
      >
        <meshBasicMaterial  map={tvScreen} />
        <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.9, 30.69, 10]}
        scale={[190, 10, 100]}
        onClick={(event) => {
          event.stopPropagation();
          console.log("demo");
        }}
        rotation={[Math.PI / 2, 0, 1.5]}
      >
        <meshBasicMaterial color="red"  />

      </mesh>
      </mesh> */}
      <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.9, 30.69, 10]}
        scale={[19, 1, 10]}
        rotation={[Math.PI / 2, 0, 1.5]}
        onClick={(event) => {
          event.stopPropagation();
          console.log("TvScreen");
        }}
      >
        <meshBasicMaterial map={tvScreen} />
      </mesh>
      <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.1, 35, 0]} // Slightly offset to avoid overlap
        scale={cubeSize}
        rotation={[Math.PI / 2, 0, 1.5]}
        onClick={(event) => {
          event.stopPropagation();
          handleClick(linkedinLink);
        }}
      >
        <meshBasicMaterial map={linkedinTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.1, 26, 0]} // Slightly offset to avoid overlap
        scale={cubeSize}
        rotation={[Math.PI / 2, 0, 1.5]}
        onClick={(event) => {
          event.stopPropagation();
          handleClick(resumeLink);
        }}
      >
        <meshBasicMaterial map={resumeTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.1, 35, 19.5]} // Slightly offset to avoid overlap
        scale={cubeSize}
        rotation={[Math.PI / 2, 0, 1.5]}
        onClick={(event) => {
          event.stopPropagation();
          handleClick(instagramLink);
        }}
      >
        <meshBasicMaterial map={instagramTexture} transparent />
      </mesh>
      <mesh
        geometry={nodes.Plane001.geometry}
        position={[34.1, 26.3, 19.5]} // Slightly offset to avoid overlap
        scale={cubeSize}
        rotation={[Math.PI / 2, 0, 1.5]}
        onClick={(event) => {
          event.stopPropagation();
          handleClick(githubLink);
        }}
      >
        <meshBasicMaterial map={githubTexture} transparent />
      </mesh>
    </group>
  );
}

useGLTF.preload("./Model/TV3.glb");
